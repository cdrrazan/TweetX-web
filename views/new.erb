<!--
  TweetX New Tweet View
  Form to add new tweets to the collection
-->
<h2 class="mb-4">âž• Add New Tweets</h2>

<div class="card p-4 shadow-sm">
  <form action="/submit" method="post" id="tweetForm" class="row g-3">

    <!-- Category Selection -->
    <div class="col-12">
      <label class="form-label">Select Categories</label>
      <div class="dropdown">
        <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
          Choose Categories
        </button>
        <ul class="dropdown-menu p-3" style="max-height: 300px; overflow-y: auto;">
          <% @categories.each do |category| %>
            <li>
              <div class="form-check">
                <input class="form-check-input category-checkbox" type="checkbox" name="categories[]" id="<%= category %>" value="<%= category %>" onchange="updateCategoryList()">
                <label class="form-check-label" for="<%= category %>"><%= category.capitalize %></label>
              </div>
            </li>
          <% end %>
        </ul>
      </div>

      <!-- Selected Categories Display -->
      <div class="mt-3">
        <strong>Selected:</strong>
        <span id="selectedCategories" class="d-inline-flex flex-wrap gap-2"></span>
      </div>
    </div>

    <!-- Tweet Textarea -->
    <div class="col-12">
      <label for="tweets" class="form-label">Tweets (one per line)</label>
      <textarea id="tweets" name="tweets" rows="8" class="form-control" oninput="validateMultiTweets()" required></textarea>
      <div id="tweetValidationFeedback" class="form-text text-danger small mt-1"></div>
    </div>

    <!-- Preview Box -->
    <div class="col-12" id="previewBox" style="display: none;">
      <label class="form-label">Preview</label>
      <div class="border rounded bg-light p-3" id="previewText" style="white-space: pre-wrap; min-height: 120px;"></div>
    </div>

    <!-- Action Buttons -->
    <div class="col-12 d-flex gap-2 mt-3">
      <button type="submit" class="btn btn-success">Add to Collection</button>
      <a href="/dashboard" class="btn btn-secondary">Back</a>
    </div>

  </form>
</div>

<!-- Category Selection Toast -->
<div class="position-fixed bottom-0 end-0 p-3 d-none" id="categoryToastWrapper" style="z-index: 1080;">
  <div id="categorySelectionToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body">
        ðŸš« Please select at least one category before saving.
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  </div>
</div>

<!-- JavaScript for form validation and category management -->
<script>
  document.getElementById("tweetForm").addEventListener("submit", function(event) {
    const selectedCategories = document.querySelectorAll('input[name="categories[]"]:checked');

    if (selectedCategories.length === 0) {
      event.preventDefault(); // Prevent form submission

      const wrapper = document.getElementById("categoryToastWrapper");
      const toastEl = document.getElementById("categorySelectionToast");
      if (wrapper && toastEl) {
        wrapper.classList.remove("d-none");
        const toast = new bootstrap.Toast(toastEl, { delay: 5000 });
      }
      return false;
    }
  });

  function validateMultiTweets() {
    const textarea = document.getElementById("tweets");
    const feedback = document.getElementById("tweetValidationFeedback");
    const tweets = textarea.value.trim().split("\n").filter(line => line.trim() !== "");

    let errors = [];

    tweets.forEach((line, index) => {
      if (line.length > 270) {
        errors.push(`Line ${index + 1} exceeds 270 characters (${line.length})`);
      }
    });

    if (errors.length) {
      feedback.innerHTML = errors.join("<br>");
      feedback.style.display = "block";
    } else {
      feedback.style.display = "none";
    }

    // Prevent form submission if errors exist
    const form = textarea.closest("form");
    form.onsubmit = () => {
      if (errors.length) {
        alert("ðŸš« Some tweets exceed 270 characters. Please fix them.");
        return false;
      }
    };
  }

  function updateCategoryList() {
    const checkboxes = document.querySelectorAll('.category-checkbox');
    const output = document.getElementById('selectedCategories');
    output.innerHTML = '';

    checkboxes.forEach(cb => {
      if (cb.checked) {
        const badge = document.createElement('span');
        badge.className = 'badge bg-info text-dark';
        badge.innerText = cb.value;
        output.appendChild(badge);
      }
    });
  }

  // Initialize on page load
  window.onload = updateCategoryList;
</script>
